<?xml version="1.0"?>
<launch>
    <!-- This specified how information is to be formatted once printed to console -->
    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time}] [${node}]: ${message}" />

    <!-- This field can be used to define arguments, that be passed when launching. If the arg is not passed, it will take 
    the default value -->
    <arg name="ns_tutorial" default="tutorial"/>

    <!-- This is a namespace, which will prepend everything inside it with /{namespace},  in this case, /tutorial-->
    <group ns="$(arg ns_tutorial)"> 

        <!-- Here we include a launchfile from a different package. Note the "$(find listener), which means that the package
        can be located anywhere we want, without having to rely on relative paths"-->
        <include file="$(find listener)/launch/listener.launch" pass_all_args="true"/>

        <!-- Here we launch nodes directly.
            pkg:    Name of the package the node is located in
            type:   The executable that launches the node.
                        For python this is a .py file (after chmod +x file.py)
                        For cpp this is the name of the compiled executable as defined in the CMakeLists.txt of the package
            name:   Name of the node once it's launched
            output: "screen" means that the node will print to console, while "log" means it's only put in a logfile
            respawn: true or false depending if you want the node to restart after it dies (usually of some error) -->
        <node pkg="talker_cpp" type="talker_cpp_node"     name="talker_cpp" output="screen" respawn="true"/>
        <node pkg="talker_py"  type="talker.py"           name="talker_py"  output="screen" respawn="true"/>
    </group>

</launch>